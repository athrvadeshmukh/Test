layout('us');			// US keyboard layout
typingSpeed(10,15)	// Wait 100ms between key strokes + an additional random value between 0ms and 150ms (natural)

//waitLEDRepeat(NUM);		// Wait till NUM LED of target changes frequently multiple times (doesn't work on OSX)
press("GUI r");
delay(500);
type("notepad\n")
delay(1000);
type("Complex Java Programs\n");
delay(600);
type("To know more and in-depth about a programming language, one should practice the specific programming language programs. Working with programs will make you learn and understand the programming language better and will never forget the concepts when implemented practically. Especially if you are a beginner, then it is good to start with the programs to understand several concepts in the Java programming language. But one should also notice that if you are new, then first read and understand the concepts and then implement the concepts.\n");
delay(600);
type("Here, in this section, we will try to understand some basic concepts by implementing the related examples such as arrays, strings, multithreading, OOPs, and many more. We will see few complex examples to know how complex programs can be created and implemented.\n");
delay(600);
type("Let's begin the implementation of the Java programs by understanding a simple basic program.\n");
delay(600);
type("Basic Java Program\n");
delay(600);
type("To find the factorial of a number in Java\n");
delay(600);
type("Below is the code given that implements the factorial of a number n using the for loop:\n");
delay(600);
type("Backward Skip 10s\n");
delay(600);
type("Play Video\n");
delay(600);
type("Forward Skip 10s\n");
delay(600);
type("class factorial{\n");
delay(600);
type("public static void main(String args[]){\n");
delay(600);
type("int i, fact=1;\n");
delay(600);
type("int n=5;\n");
delay(600);
type("for(i=1;i<=5;i++)\n");
delay(600);
type("{\n");
delay(600);
type("fact=fact*i;\n");
delay(600);
type("}\n");
delay(600);
type("System.out.println(\"Factorial of \"+ n+ \" is: \"+fact);\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("The code snippet is shown below:\n");
delay(600);
type("Complex Java Programs\n");
delay(600);
type("Output:\n");
delay(600);
type("Complex Java Programs\n");
delay(600);
type("Implementing the factorial program using Recursion\n");
delay(600);
type("Below is the code given that implements the factorial of a number n using Recursion:\n");
delay(600);
type("class factorial\n");
delay(600);
type("{\n");
delay(600);
type("static int factorialexm(int num){\n");
delay(600);
type("if(num==0)\n");
delay(600);
type("return 1;\n");
delay(600);
type("else\n");
delay(600);
type("return (num * factorialexm(num-1));\n");
delay(600);
type("}\n");
delay(600);
type("public static void main(String args[]){\n");
delay(600);
type("int fact = 1, i;\n");
delay(600);
type("int num = 8;\n");
delay(600);
type("fact = factorialexm(num);\n");
delay(600);
type("System.out.println(\"Factorial of \"+num+\" is: \"+fact);\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("The code snippet for the above code is shown below:\n");
delay(600);
type("Complex Java Programs\n");
delay(600);
type("Output:\n");
delay(600);
type("Complex Java Programs\n");
delay(600);
type("Complex Array Program Implementation\n");
delay(600);
type("To find the difference between the maximum and minimum number in an array.\n");
delay(600);
type("Below we have implemented a one-dimensional array in Java where we have created a user-defined class:\n");
delay(600);
type("Solution: The task we have to complete is to find the minimum value, maximum value and then finally find the difference between the max and min value. The code will be as follows:\n");
delay(600);
type("import java.util.Scanner;\n");
delay(600);
type("//This class will calculate the max and min values of the array\n");
delay(600);
type("class TestArray\n");
delay(600);
type("{\n");
delay(600);
type("int MAX(int[]Arry)\n");
delay(600);
type("{\n");
delay(600);
type("int maxValue= Arry[0];\n");
delay(600);
type("for(int i=1;i<Arry.length;i++)\n");
delay(600);
type("{\n");
delay(600);
type("if(Arry[i]>maxValue)\n");
delay(600);
type("{\n");
delay(600);
type("maxValue=Arry[i];\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("return maxValue;//This method will return the max value present in the array.\n");
delay(600);
type("}\n");
delay(600);
type("int MIN(int[]Arry)\n");
delay(600);
type("{\n");
delay(600);
type("int minValue=Arry[0];\n");
delay(600);
type("for(int i=1;i<Arry.length;i++)\n");
delay(600);
type("{\n");
delay(600);
type("if(Arry[i]<minValue)\n");
delay(600);
type("{\n");
delay(600);
type("minValue=Arry[i];\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("return minValue;\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("public class DifferenceArry\n");
delay(600);
type("{\n");
delay(600);
type("public static void main(String[] args)\n");
delay(600);
type("{\n");
delay(600);
type("int n;\n");
delay(600);
type("//It creates scanner object\n");
delay(600);
type("Scanner sc = new Scanner(System.in);\n");
delay(600);
type("System.out.print(\"Enter the array elements:\" );\n");
delay(600);
type("n=sc.nextInt();\n");
delay(600);
type("int arr[]=new int[n];\n");
delay(600);
type("for(int i=0;i<arr.length;i++)\n");
delay(600);
type("{\n");
delay(600);
type("System.out.print(\"Enter [\"+(i+1)+\"] element :\" );\n");
delay(600);
type("arr[i]=sc.nextInt();\n");
delay(600);
type("}\n");
delay(600);
type("TestArray obj=new TestArray();\n");
delay(600);
type("System.out.println(\"Maximum value in the array is :\" +obj.MAX(arr));\n");
delay(600);
type("System.out.println(\"Minimum value in the array is :\" +obj.MIN(arr));\n");
delay(600);
type("int diff=obj.MAX(arr)-obj.MIN(arr);\n");
delay(600);
type("System.out.print(\"Difference between max and min elements is : \" +diff );\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("The snippets for the above code in Eclipse are represented below:\n");
delay(600);
type("Complex Java Programs\n");
delay(600);
type("Complex Java Programs\n");
delay(600);
type("Output:\n");
delay(600);
type("Complex Java Programs\n");
delay(600);
type("Thus, in this complex array program implementation, we covered three tasks, i.e., how to find the largest value, smallest value and calculating the difference between two values.\n");
delay(600);
type("Implementing Complex String Program in Java\n");
delay(600);
type("To compare StringBuffer object to String Object in Java\n");
delay(600);
type("Below we have implemented a string program where we have compared a StringBuffer object (which is an object used for creating modifiable String objects) to a simple String object. The code for the program is as follows:\n");
delay(600);
type("public class StringComparison {\n");
delay(600);
type("public static void main(String a[]){\n");
delay(600);
type("String str = \"JavaTpoint is a great website to acquire knowledge\";\n");
delay(600);
type("StringBuffer obj =\n");
delay(600);
type("new StringBuffer(\"JavaTpoint is a great website to acquire knowledge\");\n");
delay(600);
type("if(str.contentEquals(obj)){\n");
delay(600);
type("System.out.println(\"The content of the string is equal\");\n");
delay(600);
type("} else {\n");
delay(600);
type("System.out.println(\"The content of the string is not equal\");\n");
delay(600);
type("}\n");
delay(600);
type("StringBuffer obj1 =\n");
delay(600);
type("new StringBuffer(\"It is another string\");\n");
delay(600);
type("if(str.contentEquals(obj1)){\n");
delay(600);
type("System.out.println(\"The content of the string is equal\");\n");
delay(600);
type("} else {\n");
delay(600);
type("System.out.println(\"The content of the string is not equal\");\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("The code snippet for the above program in Eclipse can be seen below:\n");
delay(600);
type("Complex Java Programs\n");
delay(600);
type("Output:\n");
delay(600);
type("Complex Java Programs\n");
delay(600);
type("In the output, it is clear that when the object of the StringBuffer is equal to the String object, it displays the message that both are equal. Else, the output is displayed that the objects are not equal.\n");
delay(600);
type("Complex Multithreading Example\n");
delay(600);
type("Multithreading is the concept used for removing CPU overheads by executing two or more parts of a program simultaneously in the form of threads.\n");
delay(600);
type("Below we have created a multithreading program where we have created multiple threads in a program as:\n");
delay(600);
type("class MultithreadExm implements Runnable {\n");
delay(600);
type("public void run()\n");
delay(600);
type("{\n");
delay(600);
type("try {\n");
delay(600);
type("// It shows that thread is running\n");
delay(600);
type("System.out.println(\n");
delay(600);
type("\"The thread \" + Thread.currentThread().getId()\n");
delay(600);
type("+ \" is currently running\");\n");
delay(600);
type("}\n");
delay(600);
type("catch (Exception e) {\n");
delay(600);
type("System.out.println(\"Catching exception\");\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("class multithrdexp {\n");
delay(600);
type("public static void main(String[] args)\n");
delay(600);
type("{\n");
delay(600);
type("int n = 5; // Number of threads\n");
delay(600);
type("for (int i = 0; i < n; i++) {\n");
delay(600);
type("Thread object\n");
delay(600);
type("= new Thread(new MultithreadExm());\n");
delay(600);
type("object.start();\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("ADVERTISEMENT\n");
delay(600);
type("ADVERTISEMENT\n");
delay(600);
type("The code snippet for the above code in Eclipse IDE is shown below:\n");
delay(600);
type("Complex Java Programs\n");
delay(600);
type("Output:\n");
delay(600);
type("Complex Java Programs\n");
delay(600);
type("Inheritance Program in Java\n");
delay(600);
type("The term inheritance means inheriting the behavior and properties of the parent class to its child class.\n");
delay(600);
type("Below is the implementation of the inheritance program in Java:\n");
delay(600);
type("class A\n");
delay(600);
type("{\n");
delay(600);
type("public void methodA() {\n");
delay(600);
type("System.out.println(\"method of Class A\");\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("class B extends A{\n");
delay(600);
type("public void methodB(){\n");
delay(600);
type("System.out.println(\"method of Class B\");\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("class C extends A{\n");
delay(600);
type("public void methodC(){\n");
delay(600);
type("System.out.println(\"method of Class C\");\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("class D extends A{\n");
delay(600);
type("public void methodD(){\n");
delay(600);
type("System.out.println(\"method of Class D\");\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("class InheritncExm{\n");
delay(600);
type("public static void main(String args[])\n");
delay(600);
type("{\n");
delay(600);
type("B obj1 = new B();\n");
delay(600);
type("C obj2 = new C();\n");
delay(600);
type("D obj3 = new D();\n");
delay(600);
type("//All classes can access the method of class A\n");
delay(600);
type("obj1.methodA();\n");
delay(600);
type("obj2.methodA();\n");
delay(600);
type("obj3.methodA();\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("The code snippet for the above code in Eclipse is represented as:\n");
delay(600);
type("Complex Java Programs\n");
delay(600);
type("Output:\n");
delay(600);
type("Complex Java Programs\n");
delay(600);
type("Miscellaneous Java Programs\n");
delay(600);
type("Implementing a few miscellaneous types of complex programs that are generally asked:\n");
delay(600);
type("Creating Deadlock\n");
delay(600);
type("Deadlock is a condition that occurs in multithreading where two or more processes get blocked forever. When there are two or more threads, the condition of deadlock occurs because all threads try to execute their section first, and thus deadlock occurs, and no thread is able to get executed.\n");
delay(600);
type("Below we have implemented a deadlock program where we have created such a scene where more than one thread is created, and none of them are able to get executed. Here is the code:\n");
delay(600);
type("public class DeadlockExm{\n");
delay(600);
type("public static void main(String[] args){\n");
delay(600);
type("final String str1 = \"JavaTpoint\";\n");
delay(600);
type("final String str2 = \"great source for learning\";\n");
delay(600);
type("Thread t1 = new Thread() {\n");
delay(600);
type("public void run(){\n");
delay(600);
type("synchronized(str1){\n");
delay(600);
type("System.out.println(\"In thread 1, str1 is locked\");\n");
delay(600);
type("try{ Thread.sleep(100);} catch(Exception e) {}\n");
delay(600);
type("synchronized(str2){\n");
delay(600);
type("System.out.println(\"In thread 1, str2 is locked\");\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("};\n");
delay(600);
type("Thread t2 = new Thread() {\n");
delay(600);
type("public void run(){\n");
delay(600);
type("synchronized(str1){\n");
delay(600);
type("System.out.println(\"In thread 2, str1 is locked\");\n");
delay(600);
type("try{ Thread.sleep(100);} catch(Exception e) {}\n");
delay(600);
type("synchronized(str2){\n");
delay(600);
type("System.out.println(\"In thread 2, str2 is locked\");\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("};\n");
delay(600);
type("t1.start();\n");
delay(600);
type("t2.start();\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("The code snippet for the above program is represented in Eclipse as:\n");
delay(600);
type("Complex Java Programs\n");
delay(600);
type("Output:\n");
delay(600);
type("Complex Java Programs\n");
delay(600);
type("Checking if two strings are Anagram in Java\n");
delay(600);
type("The term anagram means checking if two strings contain the same characters but are present in a different order. Such strings are known as Anagram Strings. For example, spot and post, ten and net, and so on.\n");
delay(600);
type("Below we have implemented a program taking two strings from the user and then checked if these strings are Anagram or not. Here is the code:\n");
delay(600);
type("import java.util.Arrays;\n");
delay(600);
type("import java.util.Scanner;\n");
delay(600);
type("class anagramexm {\n");
delay(600);
type("public static void main(String[] args) {\n");
delay(600);
type("Scanner input = new Scanner(System.in);\n");
delay(600);
type("System.out.print(\"Enter first String value: \");\n");
delay(600);
type("String str1 = input.nextLine();\n");
delay(600);
type("System.out.print(\"Enter second String value: \");\n");
delay(600);
type("String str2 = input.nextLine();\n");
delay(600);
type("if(str1.length() == str2.length()) {\n");
delay(600);
type("char[] charArray1 = str1.toCharArray();\n");
delay(600);
type("char[] charArray2 = str2.toCharArray();\n");
delay(600);
type("Arrays.sort(charArray1);\n");
delay(600);
type("Arrays.sort(charArray2);\n");
delay(600);
type("boolean result = Arrays.equals(charArray1, charArray2);\n");
delay(600);
type("if(result) {\n");
delay(600);
type("System.out.println(str1 + \" and \" + str2 + \" are anagram.\");\n");
delay(600);
type("}\n");
delay(600);
type("else {\n");
delay(600);
type("System.out.println(str1 + \" and \" + str2 + \" are not anagram.\");\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
type("else {\n");
delay(600);
type("System.out.println(str1 + \" and \" + str2 + \" are not anagram.\");\n");
delay(600);
type("}\n");
delay(600);
type("input.close();\n");
delay(600);
type("}\n");
delay(600);
type("}\n");
delay(600);
